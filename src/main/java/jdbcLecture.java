import com.mysql.jdbc.Driver; // actual driver that specifically lets us work with mysql

import java.sql.*;

public class jdbcLecture {
    public static void main(String[] args) throws SQLException {
        Config config = new Config();

        // Instantiate the mysql driver to register to the built in Java Driver Manager
        DriverManager.registerDriver(new Driver());

        // Connect to the database by providing the url, user, and the password of the user we want to connect as
        Connection connection = DriverManager.getConnection(config.getUrl(), config.getUser(), config.getPassword());

        Statement statement = connection.createStatement();

        // We can use the statement object to make our queries.

        // Returns a boolean indicating success
//        statement.execute("DELETE FROM albums WHERE id = 4");

        // Returns the number of rows affected
//        statement.executeUpdate("INSERT INTO albums (artist, name, release_date, genre, sales) VALUES('Nelly Furtado', 'Loose', 2006, 'Dance-pop, hip hop, R&B', 12.5)");

        // Returns a ResultSet object.
//    statement.executeQuery("SELECT * FROM albums");

        // Handling the results with the ResultSet object.

        String selectQuery = "SELECT * FROM albums";
        ResultSet rs = statement.executeQuery(selectQuery);

        // By calling the .next() method we can iterate over the rows.
        // The method will return as true as long as there are rows left in our results.
        // Therefore, the most common way to handle the results is to sue a while loop.

        while(rs.next()) {
            //do something with each row
            System.out.println("Here's an album: ");
            System.out.println(" id:" + rs.getLong("id")); // get data type of column and name of the coloumn
            System.out.println(" artist: " + rs.getString("artist"));
            System.out.println(" name: " + rs.getString("name"));
        }

        // INSERT query
        String insertQuery = "INSERT INTO albums (artist, name, release_date, genre, sales) VALUES('Nelly Furtado', 'Loose', 2006, 'Dance-pop, hip hop, R&B', 12.5)";

        // For executeUpdate, we can have two arguments:
        // First is the Query String we want to execute
        // Second (not required) is a constant from the statement object.
        // This gives us access to the ID's that are automatically generated by the database.

        statement.executeUpdate(insertQuery, statement.RETURN_GENERATED_KEYS); // static content ; access to our generated ID's

        // We can then use the getGeneratedKeys() method on the ResultSet objects which will hold any ID's generated by the database.
        ResultSet rsKeys = statement.getGeneratedKeys(); // anything that is newly inserted, will be tracked by the generated keys, once having it we can access

        if (rsKeys.next()) {
            System.out.println("Inserted a new record! New ID: " + rsKeys.getLong(1));
        }


    }
}
